name: Build and Release ImmortalWrt for NanoPi R4S

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 00:00 运行（北京时间 08:00）
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 检出仓库代码
      - name: Checkout
        uses: actions/checkout@v4

      # 设置环境
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev unzip gawk zlib1g-dev git

      # 下载 ImmortalWrt Image Builder
      - name: Download Image Builder
        run: |
          wget https://downloads.immortalwrt.org/releases/24.10.0/targets/rockchip/armv8/immortalwrt-imagebuilder-24.10.0-rockchip-armv8.Linux-x86_64.tar.xz
          tar -Jxf immortalwrt-imagebuilder-24.10.0-rockchip-armv8.Linux-x86_64.tar.xz
          mv immortalwrt-imagebuilder-24.10.0-rockchip-armv8.Linux-x86_64 imagebuilder

      # 配置软件包
      - name: Configure packages
        run: |
          cd imagebuilder
          echo "CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-r4s=y" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-ssr-plus=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-homebox=y" >> .config
          echo "CONFIG_PACKAGE_iptables=y" >> .config
          echo "CONFIG_PACKAGE_iptables-mod-tproxy=y" >> .config
          echo "CONFIG_PACKAGE_ipt2socks=y" >> .config
          echo "CONFIG_PACKAGE_shadowsocks-libev-ss-local=y" >> .config
          echo "CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=y" >> .config
          echo "CONFIG_PACKAGE_simple-obfs=y" >> .config
          make defconfig

      # 编译固件
      - name: Build firmware
        run: |
          cd imagebuilder
          make image PROFILE="friendlyarm_nanopi-r4s" PACKAGES="luci luci-app-ssr-plus luci-app-homebox iptables iptables-mod-tproxy ipt2socks shadowsocks-libev-ss-local shadowsocksr-libev-ssr-local simple-obfs"

      # 获取当前日期作为版本号
      - name: Set version
        id: version
        run: echo "VERSION=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      # 检查是否已存在同名 Tag
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/${{ env.VERSION }}" || true)
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag ${{ env.VERSION }} already exists, appending to existing release."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 创建 GitHub Release（如果 Tag 不存在）
      - name: Create Release
        if: env.TAG_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            ImmortalWrt firmware for NanoPi R4S, built on ${{ env.VERSION }}.
            Includes luci-app-ssr-plus and luci-app-homebox.
          draft: false
          prerelease: false

      # 上传固件到 Release
      - name: Upload firmware to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url || github.event.release.upload_url }}
          asset_path: imagebuilder/bin/targets/rockchip/armv8/immortalwrt-24.10.0-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.bin
          asset_name: immortalwrt-nanopi-r4s-${{ env.VERSION }}.bin
          asset_content_type: application/octet-stream

      # 可选：清理工作空间
      - name: Clean up
        run: |
          rm -rf imagebuilder
